datos <- read.table("/Users/genarocoria/Downloads/shortleaf.txt", header = TRUE)
datos <- read.table("~/shortleaf.txt", header = TRUE)
datos <- read.table("/home/desktop/shortleaf.txt", header = TRUE)
datos <- read.table("/home/andres/Desktop/Ejercicio de clase en R", header = TRUE)
datos <- read.table("/home/andres/Desktop/Ejercicio\ de\ clase\ en\ R", header = TRUE)
datos <- read.table("/home/andres/Desktop/Ejercicio-de-clase-en-R/shortleaf.txt", header = TRUE)
## Datos crudos
library(ggplot2)
ggplot(datos, aes(x = Diam, y = Vol)) + geom_point()
## Datos transformados suponiendo que modelamos " Vol ~ Diam "
##                                              "   y ~ x    "
### Probando box-tid
car::boxTidwell(Vol ~ Diam, data = datos) # la potencia más próxima es 2
ggplot(datos, aes(x = I(Diam^2), y = Vol)) + geom_point() # Funcionó bien...
## Datos transformados suponiendo que modelamos " Vol ~ Diam "
##                                              "   y ~ x    "
### Probando box-tid
car::boxTidwell(Vol ~ Diam, data = datos) # la potencia más próxima es 2
## Datos crudos
library(ggplot2)
ggplot(datos, aes(x = Diam, y = Vol)) + geom_point()
ggplot(datos, aes(x = I(Diam^2), y = Vol)) + geom_point() # Funcionó bien...
fit <- glm(Vol ~ Diam, data = datos)
car::powerTransform(fit) # Como el más cercano es 0.5 usamos esa potencia.
# Recuerden que si el más cercano es 0 se usa log()
ggplot(datos, aes(x = Diam, y = I(Vol^(0.5)))) +
geom_point() # También funcionó bien... pero creo que elegiremos la box-tid
fit <- lm(Vol ~ I(Diam^2), data = datos)
summary(fit)
b0 <- coef(fit)[1]
b1 <- coef(fit)[2]
ggplot(datos, aes(I(Diam^(2)), Vol)) +
geom_point() +
geom_abline(intercept = b0, slope = b1)
# e) Gráficas de los datos no transformados, con curva ajustada
curva_ajustada <- function(x) {b0 + b1*x^2} # aquí despejen E[y] de su modelo original,
# por ejemplo, si usaron log(E[y]), debe quedar
# exp(b0 + b1*x)
ggplot(datos, aes(Diam, Vol)) +
geom_point() +
geom_function(fun = curva_ajustada)
fit <- lm(Vol ~ Diam^2, data = datos)
car::boxTidwell(Vol ~ Diam, data = datos) # la potencia más próxima es 2
ggplot(datos, aes(x = Diam^2, y = Vol)) + geom_point() # Funcionó bien...
library(tidyverse)
---
title: "Ejercicio de clase 5"
library(tidyverse)
datos <- read_csv("initech.csv")
View(datos)
datos <- read_csv("initech.csv")
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary))
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) + xlab("Años") + ylab("Salario")
car::boxTidwell(salary ~ years, data = datos)
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary^3)) + xlab("Años") + ylab("Salario")
ggplot(datos, aes(x = Diam, y = Vol)) + geom_point()
library(ggplot2)
ggplot(datos, aes(x = Diam, y = Vol)) + geom_point()
datos <- read.table("/home/andres/Desktop/Ejercicio-de-clase-en-R/shortleaf.txt", header = TRUE)
library(ggplot2)
ggplot(datos, aes(x = Diam, y = Vol)) + geom_point()
car::boxTidwell(Vol ~ Diam, data = datos) # la potencia más próxima es 2
ggplot(datos, aes(x = Diam^2, y = Vol)) + geom_point() # Funcionó bien...
fit <- glm(Vol ~ Diam, data = datos)
car::powerTransform(fit) # Como el más cercano es 0.5 usamos esa potencia.
# Recuerden que si el más cercano es 0 se usa log()
ggplot(datos, aes(x = Diam, y = Vol^(0.5))) +
geom_point() # También funcionó bien... pero creo que elegiremos la box-tid
ggplot() + geom_point(mapping = aes(x = datos$years^3, y = datos$salary)) + xlab("Años") + ylab("Salario")
ggplot() + geom_point(mapping = aes(x = datos$years^3, y = datos$salary)) + xlab("Años") + ylab("Salario")
ggplot() + geom_point(mapping = aes(x = datos$years^3, y = datos$salary)) + xlab("Años") + ylab("Salario")
library(tidyverse)
datos <- read_csv("initech.csv")
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) + xlab("Años") + ylab("Salario")
car::boxTidwell(salary ~ years, data = datos)
ggplot() + geom_point(mapping = aes(x = datos$years^3, y = datos$salary)) + xlab("Años") + ylab("Salario")
datos <- read_csv("initech.csv")
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) + xlab("Años") + ylab("Salario")
car::boxTidwell(salary ~ years, data = datos)
ggplot() + geom_point(mapping = aes(x = datos$years^3, y = datos$salary)) + xlab("Años") + ylab("Salario")
datos <- read.table("/home/andres/Desktop/Ejercicio-de-clase-en-R/shortleaf.txt", header = TRUE)
# a) Scatterplot con datos crudos (sin transformar) y datos transformados
## Datos crudos
library(ggplot2)
ggplot(datos, aes(x = Diam, y = Vol)) + geom_point()
car::boxTidwell(Vol ~ Diam, data = datos) # la potencia más próxima es 2
datos <- read_csv("initech.csv")
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) + xlab("Años") + ylab("Salario")
datos <- read_csv("initech.csv")
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) + xlab("Años") + ylab("Salario")
datos <- read_csv("initech.csv")
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) + xlab("Años") + ylab("Salario")
datos <- read_csv("initech.csv")
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) + xlab("Años") + ylab("Salario")
datos <- read_csv("initech.csv")
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) + xlab("Años") + ylab("Salario")
car::boxTidwell(salary ~ years, data = datos)
ggplot() + geom_point(mapping = aes(x = datos$years^3, y = datos$salary)) + xlab("Años") + ylab("Salario")
fit <- glm(salary ~ years, data = datos)
car::powerTransform(fit)
ggplot() + geom_point(mapping = aes(x = datos$years, y = log(datos$salary))) + xlab("Años") + ylab("Salario")
ggplot() + geom_point(mapping = aes(x = datos$years, y = log(datos$salary))) + xlab("Años") + ylab("Salario")
datos <- read_csv("initech.csv")
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary))
+ xlab("Años") + ylab("Salario")
datos <- read_csv("initech.csv")
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) + xlab("Años") + ylab("Salario")
datos <- read_csv("initech.csv")
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) +
xlab("Años") + ylab("Salario")
ggplot() + geom_point(mapping = aes(x = datos$years, y = log(datos$salary))) +
xlab("Años") + ylab("Salario")
fit <- lm(log(salary) ~ years, data = datos)
summary(fit)
b0 <- coef(fit)[1]
b1 <- coef(fit)[2]
b0 <- coef(fit)[1]
b1 <- coef(fit)[2]
ggplot() + geom_point(mapping = aes(x = datos$years, y = log(datos$salary))) +
xlab("Años") + ylab("Salario")
b0 <- coef(fit)[1]
b1 <- coef(fit)[2]
ggplot() + geom_point(mapping = aes(x = datos$years, y = log(datos$salary))) +
xlab("Años") + ylab("Salario") +
geom_abline(intercept = b0, slope = b1)
curva_ajustada <- function(x) {exp(b0 + b1*x)}
curva_ajustada <- function(x) {exp(b0 + b1*x)}
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) +
xlab("Años") + ylab("Salario") +
geom_function(fun = curva_ajustada)
datos <- read.table("/home/andres/Desktop/Ejercicio-de-clase-en-R/shortleaf.txt", header = TRUE)
# a) Scatterplot con datos crudos (sin transformar) y datos transformados
## Datos crudos
library(ggplot2)
ggplot(datos, aes(x = Diam, y = Vol)) + geom_point()
car::boxTidwell(Vol ~ Diam, data = datos) # la potencia más próxima es 2
ggplot(datos, aes(x = Diam^2, y = Vol)) + geom_point() # Funcionó bien...
### Probando box-cox
fit <- glm(Vol ~ Diam, data = datos)
car::powerTransform(fit) # Como el más cercano es 0.5 usamos esa potencia.
# Recuerden que si el más cercano es 0 se usa log()
ggplot(datos, aes(x = Diam, y = Vol^(0.5))) +
geom_point() # También funcionó bien... pero creo que elegiremos la box-tid
fit <- lm(Vol ~ I(Diam^2), data = datos)
summary(fit)
b0 <- coef(fit)[1]
b1 <- coef(fit)[2]
ggplot(datos, aes(I(Diam^(2)), Vol)) +
geom_point() +
geom_abline(intercept = b0, slope = b1)
ggplot(datos, aes(Diam^(2), Vol)) +
geom_point() +
geom_abline(intercept = b0, slope = b1)
curva_ajustada <- function(x) {b0 + b1*x^2}
ggplot(datos, aes(Diam, Vol)) +
geom_point() +
geom_function(fun = curva_ajustada)
ggplot() + geom_point(mapping = aes(x = datos$years, y = log(datos$salary))) +
xlab("Años") + ylab("Salario") +
geom_abline(intercept = b0, slope = b1)
fit <- lm(log(salary) ~ years, data = datos)
library(tidyverse)
datos <- read_csv("initech.csv")
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) +
xlab("Años") + ylab("Salario")
fit <- glm(salary ~ years, data = datos)
car::powerTransform(fit)
ggplot() + geom_point(mapping = aes(x = datos$years, y = log(datos$salary))) +
xlab("Años") + ylab("Salario")
fit <- lm(log(salary) ~ years, data = datos)
b0 <- coef(fit)[1]
b1 <- coef(fit)[2]
summary(fit)
ggplot() + geom_point(mapping = aes(x = datos$years, y = log(datos$salary))) +
xlab("Años") + ylab("Salario") +
geom_abline(intercept = b0, slope = b1)
curva_ajustada <- function(x) {exp(b0 + b1*x)}
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) +
xlab("Años") + ylab("Salario") +
geom_function(fun = curva_ajustada)
ggplot() + geom_point(mapping = aes(x = datos$years, y = log(datos$salary))) +
xlab("Años") + ylab("Salario") +
geom_abline(intercept = b0, slope = b1)
curva_ajustada <- function(x) {exp(b0 + b1*x)}
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) +
xlab("Años") + ylab("Salario") +
geom_function(fun = curva_ajustada)
fit <- lm(log(salary) ~ years, data = datos)
b0 <- coef(fit)[1]
b1 <- coef(fit)[2]
print(b0)
fit <- lm(log(salary) ~ years, data = datos)
b0 <- coef(fit)[1]
b1 <- coef(fit)[2]
print(b0,b1)
fit <- lm(log(salary) ~ years, data = datos)
b0 <- coef(fit)[1]
b1 <- coef(fit)[2]
print(b0)
print(b1)
library(tidyverse)
datos <- read_csv("initech.csv")
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) +
xlab("Años") + ylab("Salario")
fit <- glm(salary ~ years, data = datos)
car::powerTransform(fit)
ggplot() + geom_point(mapping = aes(x = datos$years, y = log(datos$salary))) +
xlab("Años") + ylab("Salario")
fit <- lm(log(salary) ~ years, data = datos)
b0 <- coef(fit)[1]
b1 <- coef(fit)[2]
print(b0)
print(b1)
summary(fit)
ggplot() + geom_point(mapping = aes(x = datos$years, y = log(datos$salary))) +
xlab("Años") + ylab("Salario") +
geom_abline(intercept = b0, slope = b1)
curva_ajustada <- function(x) {exp(b0 + b1*x)}
ggplot() + geom_point(mapping = aes(x = datos$years, y = datos$salary)) +
xlab("Años") + ylab("Salario") +
geom_function(fun = curva_ajustada)
